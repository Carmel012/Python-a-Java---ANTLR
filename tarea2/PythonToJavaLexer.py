# Generated from PythonToJava.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,103,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,1,1,1,1,
        2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,
        7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        5,12,73,8,12,10,12,12,12,76,9,12,1,13,4,13,79,8,13,11,13,12,13,80,
        1,14,4,14,84,8,14,11,14,12,14,85,1,15,4,15,89,8,15,11,15,12,15,90,
        1,15,1,15,1,16,1,16,5,16,97,8,16,10,16,12,16,100,9,16,1,16,1,16,
        0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,1,0,5,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,48,57,2,0,10,10,13,13,2,0,9,9,32,32,107,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,39,1,0,0,0,5,41,1,0,0,0,7,43,
        1,0,0,0,9,45,1,0,0,0,11,47,1,0,0,0,13,49,1,0,0,0,15,56,1,0,0,0,17,
        62,1,0,0,0,19,64,1,0,0,0,21,66,1,0,0,0,23,68,1,0,0,0,25,70,1,0,0,
        0,27,78,1,0,0,0,29,83,1,0,0,0,31,88,1,0,0,0,33,94,1,0,0,0,35,36,
        5,100,0,0,36,37,5,101,0,0,37,38,5,102,0,0,38,2,1,0,0,0,39,40,5,40,
        0,0,40,4,1,0,0,0,41,42,5,41,0,0,42,6,1,0,0,0,43,44,5,58,0,0,44,8,
        1,0,0,0,45,46,5,44,0,0,46,10,1,0,0,0,47,48,5,61,0,0,48,12,1,0,0,
        0,49,50,5,114,0,0,50,51,5,101,0,0,51,52,5,116,0,0,52,53,5,117,0,
        0,53,54,5,114,0,0,54,55,5,110,0,0,55,14,1,0,0,0,56,57,5,112,0,0,
        57,58,5,114,0,0,58,59,5,105,0,0,59,60,5,110,0,0,60,61,5,116,0,0,
        61,16,1,0,0,0,62,63,5,43,0,0,63,18,1,0,0,0,64,65,5,45,0,0,65,20,
        1,0,0,0,66,67,5,42,0,0,67,22,1,0,0,0,68,69,5,47,0,0,69,24,1,0,0,
        0,70,74,7,0,0,0,71,73,7,1,0,0,72,71,1,0,0,0,73,76,1,0,0,0,74,72,
        1,0,0,0,74,75,1,0,0,0,75,26,1,0,0,0,76,74,1,0,0,0,77,79,7,2,0,0,
        78,77,1,0,0,0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,28,1,
        0,0,0,82,84,7,3,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,
        86,1,0,0,0,86,30,1,0,0,0,87,89,7,4,0,0,88,87,1,0,0,0,89,90,1,0,0,
        0,90,88,1,0,0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,93,6,15,0,0,93,32,
        1,0,0,0,94,98,5,35,0,0,95,97,8,3,0,0,96,95,1,0,0,0,97,100,1,0,0,
        0,98,96,1,0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,98,1,0,0,0,101,
        102,6,16,0,0,102,34,1,0,0,0,6,0,74,80,85,90,98,1,6,0,0
    ]

class PythonToJavaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DEF = 1
    LPAREN = 2
    RPAREN = 3
    COLON = 4
    COMMA = 5
    ASSIGN = 6
    RETURN = 7
    PRINT = 8
    PLUS = 9
    MINUS = 10
    MUL = 11
    DIV = 12
    NAME = 13
    NUMBER = 14
    NEWLINE = 15
    WS = 16
    COMMENT = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'def'", "'('", "')'", "':'", "','", "'='", "'return'", "'print'", 
            "'+'", "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "DEF", "LPAREN", "RPAREN", "COLON", "COMMA", "ASSIGN", "RETURN", 
            "PRINT", "PLUS", "MINUS", "MUL", "DIV", "NAME", "NUMBER", "NEWLINE", 
            "WS", "COMMENT" ]

    ruleNames = [ "DEF", "LPAREN", "RPAREN", "COLON", "COMMA", "ASSIGN", 
                  "RETURN", "PRINT", "PLUS", "MINUS", "MUL", "DIV", "NAME", 
                  "NUMBER", "NEWLINE", "WS", "COMMENT" ]

    grammarFileName = "PythonToJava.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


